<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 1处：指定使用的增强 -->
    <bean id="greetingBefore" class="com.paris.dream.aop.create.advice.classes.before.advice.GreetingBeforeAdvice" />
    <bean id="greetingAfter" class="com.paris.dream.aop.create.advice.classes.before.advice.GreetingAfterAdvice" />
    <!-- 2处：指定需要对其使用代理的bean-->
    <bean id="target" class="com.paris.dream.aop.create.advice.classes.before.advice.NativeWaiter" />

    <!--
    p:proxyInterfaces 指定代理的接口，如果是多个接口，使用<list>元素
    p:interceptorNames 指定使用的增强（1处）
    p:target-ref 指定对哪个bean使用代理（2处）-->
    <bean id="waiter" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:proxyInterfaces="com.paris.dream.aop.create.advice.classes.before.advice.Waiter"
          p:interceptorNames="greetingBefore,greetingAfter"
          p:target-ref="target" />

    <!--如果是使用cglib代理技术：-->
    <!--
    <bean id="waiter" class="org.springframework.aop.framework.ProxyFactoryBean"-->
          <!--p:interceptorNames="greetingAdvice"-->
          <!--p:target-ref="target"-->
          <!--p:proxyTargetClass="true"/>
          -->

    <!--
    ProxyFactoryBean 负责为其他bean创建代理实例，内部使用ProxyFactory来完成这一工作
    可配置属性：
+ target：代理的目标对象
+ proxyInterface: 代理所需要的实现的接口，可以是多个接口，该属性还有一个别名属性interfaces.
+ interceptorNames: 需要植入的目标对象的Bean列表，采用Bean的名称指定，这些Bean必须是实现了org.aopalliance.intercepr.MethodInterceptor 或者org.sorngframework.aop.Advisor的bean，配置中的顺序对应调用的顺序
+ singleton:返回的代理对象是否单例，默认是单例
+ optimize: 当设置为true时 ，强制使用cglib代理，对于singleton的代理，我们推荐使用cglib代理，对于其他类型的代理，最好使用JDK代理，原因是cglib创建代理时速度慢，而创建出的代理对象运行效率较高，而使用JDK代理的表现正好相反。
+ proxyTargertClass： 是否对类进行代理（而不是对接口进行代理）。设置为true时，使用cglib代理。

    -->

</beans>